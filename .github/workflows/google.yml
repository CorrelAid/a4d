# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Mirror to GCP Source Repositories

on:
  push:
    branches:
    - main
    - develop
  workflow_dispatch:

env:
  REPO_NAME: a4d_analytics

jobs:
  mirror:
    name: Mirror Code to GCP Source Repositories
    runs-on: ubuntu-latest
    
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - id: auth
      name: Authenticate to Google Cloud
      # You may pin to the exact commit or the version.
      # uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d
      uses: google-github-actions/auth@v1
      with:
        # ID of the default project to use for future API calls and invocations.
        # If unspecified, this action will attempt to extract the value from other inputs such as "service_account" or "credentials_json".
        # project_id: $PROJECT_ID
        
        # The Google Cloud JSON service account key to use for authentication.
        # This is mutually exclusive with "workload_identity_provider".
        credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}
        
        # If true, the action will securely generate a credentials file which can be used for authentication via gcloud and Google Cloud SDKs.
        create_credentials_file: true
        
        # If true, the action will export common environment variables which are known to be consumed by popular downstream libraries and tools, including:
        #
        # - CLOUDSDK_PROJECT
        # - CLOUDSDK_CORE_PROJECT
        # - GCP_PROJECT
        # - GCLOUD_PROJECT
        # - GOOGLE_CLOUD_PROJECT
        # If "create_credentials_file" is true, additional environment variables are exported:
        # 
        # - CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
        # - GOOGLE_APPLICATION_CREDENTIALS
        # - GOOGLE_GHA_CREDS_PATH
        # If false, the action will not export any environment variables, meaning future steps are unlikely to be automatically authenticated to Google Cloud.
        export_environment_variables: true
        
        # Output format for the generated authentication token. For OAuth 2.0 access tokens, specify "access_token".
        # For OIDC tokens, specify "id_token". 
        # To skip token generation, leave this value empty.
        # token_format: # optional, default is 
        
        # List of additional service account emails or unique identities to use for impersonation in the chain.
        # delegates: # optional, default is 
        
        # If true, the action will remove any created credentials from the filesystem upon completion. 
        # This only applies if "create_credentials_file" is true.
        cleanup_credentials: true
        
        # Desired lifetime duration of the access token, in seconds. 
        # This must be specified as the number of seconds with a trailing "s" (e.g. 30s).
        # This is only valid when "token_format" is "access_token".
        # access_token_lifetime: # optional, default is 3600s
        
        # List of OAuth 2.0 access scopes to be included in the generated token.
        # This is only valid when "token_format" is "access_token".
        # access_token_scopes: # optional, default is https://www.googleapis.com/auth/cloud-platform
        
        # Email address of a user to impersonate for Domain-Wide Delegation Access tokens created for Domain-Wide Delegation cannot have a lifetime beyond 1 hour.
        # This is only valid when "token_format" is "access_token".
        # access_token_subject: # optional, default is 
        
        # Number of times to retry a failed authentication attempt.
        # This is useful for automated pipelines that may execute before IAM permissions are fully propogated.
        # retries: # optional, default is 0
        
        # Delay time before trying another authentication attempt. 
        # This is implemented using a fibonacci backoff method (e.g. 1-1-2-3-5).
        # This value defaults to 100 milliseconds when retries are greater than 0.
        # backoff: # optional
        
        # Limits the retry backoff to the specified value.
        # backoff_limit: # optional
        
        # The audience (aud) for the generated Google Cloud ID Token. 
        # This is only valid when "token_format" is "id_token".
        # id_token_audience: # optional, default is
        
        # Optional parameter of whether to include the service account email in the  generated token.
        # If true, the token will contain "email" and "email_verified" claims.
        # This is only valid when "token_format" is "id_token".
        # id_token_include_email: # optional
        
    # Install gcloud, `setup-gcloud` automatically picks up authentication from `auth`.
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      
    # Now you can run gcloud commands authenticated as the impersonated service account.
    - id: 'gcloud'
      name: 'gcloud'
      run: |
        echo "gcloud info"
        gcloud info
        echo "setting git credential.helper"
        git config credential.helper gcloud.sh
        git config --global http.postBuffer 157286400
        git config --global core.compression 0
        export GIT_TRACE_PACKET=1
        export GIT_TRACE=1
        export GIT_CURL_VERBOSE=1
        #git config --global credential.'https://source.developers.google.com'.helper /usr/lib/google-cloud-sdk/bin/git-credential-gcloud.sh
        echo "add git remote"
        git remote add google https://source.developers.google.com/p/$GCP_PROJECT/r/$REPO_NAME
        echo "final push"
        git push -f google


