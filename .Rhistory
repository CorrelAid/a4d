data_c <- as.data.frame(data_c)
return(data_c)
}
# TEST --------------------------------------------------------------------
testing <- cleaning_a4d_tracker(data = dat)
# create a summary of the variables (helpful to do sanity checks!)
library(summarytools)
summarytools::view(dfSummary(testing), file = "a4doverview_test28022022.html")
# TODOs:
## 1. Variables until [16] testing_fqr are part of the final wrapper. EVerything afterwards
#      (and buggy ones lige age_diagnosis) need to be finalized and added to the wrapper
#  2. Dates are transformed as dates but only show raw date number (e.g. "123123")
#      instead of actual date ("2020-02-02")
#  3. Edu_Occ can't be matched by thai vocabulary. Functions should work but it seems
#     that some R language encryption issues arise when saving thai strings.
#  4. Columns that are not correctly extracted yet, input needed:
#        latest_complication_screening_type, latest_complication_screening_date,
#        remarks, additional_support, est_strips_pmonth
## 4. Final check if all variables have been transformed correctly
# testing on correct data:
# 1. Currently the fbg ranges will be excluded due to values out of realistic range.
#    This is on purpose since we only know the units for specific hospitals/countries.
#    In the fake data the hospital and country codes are fake. We need to test the
#    function on the original data to ensure that the functions correctly transform
#    the unit of the fbg values (and hence include them) in the data.
#    See [12, 13] fbg and make adjustments if needed
# Setup
source("3_Code/02_a4d_patient_tracker_format.R")
source("3_Code/01_a4d_patient_tracker_extract.R")
# Setup
source("3_Code/02_a4d_patient_tracker_format.R")
source("3_Code/01_a4d_patient_tracker_extract.R")
# Setup
source("3_Code/02_a4d_patient_tracker_format.R")
source("3_Code/01_a4d_patient_tracker_extract.R")
# DESCRIPTION -------------------------------------------------------------
# "reading_a4d_tracker" is a function that reads an excel workbook (.xlsx file) that contains a4d monthly trackers and creates a tidy dataframe with that data.
# It takes into account all the sheets in the excel workbook that contain patient data, and binds these together. (e.g., if a workbook contains sheets Jan'18, Feb'18
#  and Mar'18, patient data from each sheet will be combined into one data frame)
#
# INPUT ARGUMENTS: -
#       tracker_data_file = full path of the excel workbook that contains a4d monthly trackers (format: string e.g., "users/Documents/file.xlsx")
#       year = year of tracker data (format: numeric. e.g., 2018)
#       country = country code (format: character string e.g., "xyz")
#       clinic = clinic code (format: character string e.g., "xyz")
#
#      example: reading_a4d_tracker(tracker_data_file = "~/Desktop/2017 Tracker Template.xlsx",
#                                    year = 2017,
#                                    clinic = "ABC",
#                                    country = "DEF")
#
#  FUNCTION OUTPUT:
#       tidydata: "tidy" dataframe with patient data with the following columns (format: character. This is to facilitate merging of dataframes)
# [1] "no"
# [2] "patient_name"
# [3] "province"
# [4] "gender"
# [5] "dob"
# [6] "age"
# [7] "age_diagnosis"
# [8] "recruitment_date"
# [9] "baseline_hba1c_prc"
# [10] "updated_hba1c_prc"
# [11] "updated_hba1c_date"
# [12] "baseline_fbg_mldl"
# [13] "updated_fbg_mldl"
# [14] "updated_fbg_date"
# [15] "support_from_a4d"
# [16] "testing_fqr"
# [17] "est_strips_pmoth"
# [18] "status"
# [19] "updated_fbg_sample"
# [20] "tracker_year"
# [21] "clinic_code"
# [22] "country_code"
# [23] "sheet_name"
# [24] "insulin_regimen"
# [25] "blood_pressure_sys_mmhg"
# [26] "blood_pressure_dias_mmhg"
# [27] "weight"
# [28] "height"
# [29] "bmi"
# [30] "bmi_date"
# [31] "edu_occ"
# [32] "hospitalisation"
# [33] "last_clinic_visit_date"
# [34] "additional_support"
# [35] "id"
# [36] "latest_complication_screening_type"
# [37] "latest_complication_screening_date"
# [38] "remarks"
# PACKAGES ----------------------------------------------------------------
library(tidyverse)
library(readxl)
library(zoo)
library(readr)
library(lubridate)
library(data.table)
library(tidyr)
library(dplyr)
library(openxlsx)
# tracker_data_file <- "/Volumes/A4D_project/05_2021 AN Clinic IX A4D Tracker.xlsx" # WORKS! 2017 and 2018 03_2019 AN Clinic IX A4D Tracker.xlsx + 01_2019 AN Clinic_YA A4D Tracker.xlsx"
# codebook_data_file <- "4ADMonthlyTrackerCodebook.xlsx"
a4d_functions <- "3_Code/00_a4d_extract_functionsAB.R"
# tracker_list <- list.files(path = "/Volumes/A4D_project/", pattern = ".xlsx", full.names = TRUE)
# get functions
source(a4d_functions)
# getting codebook
# columns_synonyms <- read_column_synonyms(codebook_data_file = codebook_data_file)
# FUNCTION TO READ THE A4D MONTHLY TRACKER --> PATIENT DATA --------------------------------------------------------
reading_a4d_tracker <- function(tracker_data_file, columns_synonyms) {
# list the sheets in excel workbook & filter these
sheet_list <- excel_sheets(tracker_data_file)
# MONTHLY SHEETS: only select sheets with monthly data
month_list <-sheet_list[na.omit(pmatch(month.abb, sheet_list))]
# AN PATIENT DATA SHEET: select sheet in workbook with PATIENT AN DATA
patient_sheet <-sheet_list[na.omit(grepl("AN Data", sheet_list))]
# print(patient_sheet)
# AN PATIENT DATA DATA (merge/join at the end of the if year):
an_patient_data <- data.frame(read_xlsx(tracker_data_file, patient_sheet))
all_patient_ids <- an_patient_data$Patient.ID
print("patient AN Data extracted")
# Extract year
year <- 2000 + unique(parse_number(month_list))
print(year)
an_patient_data <- clean_anon_data(an_patient_data)
print("cleaned patient anon data")
tidy_tracker_list <- NULL
sheet_num <- 1
for (CurrSheet in month_list) {
print(CurrSheet)
tracker_data <- as.data.frame(read.xlsx(xlsxFile = tracker_data_file, fillMergedCells = TRUE, sheet = CurrSheet))
print("tracker read in")
cc_codes <- extract_country_clinic_code(tracker_data, year)
country_code <- cc_codes$country_code
clinic_code <- cc_codes$clinic_code
print("country and clinic code extracted")
# view(tracker_data)
####------------2017 PATIENT DATA ----------------------------###
#### 2017 ####
if (year == 2017) {
patient_df = extract_patient_data(tracker_data,  country_code, clinic_code)
print("patient df extracted")
tracker_cols <- extract_tracker_cols(tracker_data, year)
print("tracker_col names extracted")
colnames(patient_df) <- tracker_cols
print("tracker_col names added to patient df")
patient_df = harmonize_patient_data_columns(patient_df, columns_synonyms)
print("finished harmonizing patient df")
# fix dates (split dates in cells)
patient_df <- extract_date_from_measurement_column(patient_df, "updated_hba1c_prc")
patient_df <- extract_date_from_measurement_column(patient_df, "updated_fbg_mgdl")
print("date extracted from compound cols")
patient_df <- patient_df %>% left_join(an_patient_data, by = "id")
print("added patient anon data")
patient_df <- patient_df %>%
mutate(sheet_name = CurrSheet,
tracker_mo = match(substr(CurrSheet, 1, 3),month.abb),
tracker_year = year,
country_code = country_code,
clinic_code = clinic_code)
print("added tracker metadata")
} # 2017 tracker
####------------ 2018 PATIENT DATA ----------------------------###
# 2018 ####
if (year == 2018) {
tracker_cols <- extract_tracker_cols(tracker_data, year)
print("tracker_col names extracted")
patient_df <- extract_patient_data(tracker_data, country_code, clinic_code)
print("patient df extracted")
colnames(patient_df) <- tracker_cols
print("tracker_col names added to patient df")
patient_df = harmonize_patient_data_columns(patient_df, columns_synonyms)
print("finished harmonizing patient df")
# fix dates (split dates in cells)
patient_df <- extract_date_from_measurement_column(patient_df, "updated_hba1c_prc")
patient_df <- extract_date_from_measurement_column(patient_df, "updated_fbg_mgdl")
print("date extracted from compound cols")
if (sum(colnames(patient_df) %in% "blood_pressure_mmhg") == 1)  {
patient_df <- bp_fix(patient_df)}
print("patient cleaning done")
patient_df <- patient_df %>% left_join(an_patient_data, by = "id")
print("added patient anon data")
patient_df <- patient_df %>%
mutate(sheet_name = CurrSheet,
tracker_mo = match(substr(CurrSheet, 1, 3),month.abb),
tracker_year = year,
country_code = country_code,
clinic_code = clinic_code)
print("added tracker metadata")
}  # 2018 tracker
####------------ 2019 PATIENT DATA ----------------------------###
#### 2019 ####
if (year == 2019) {
tracker_cols <- extract_tracker_cols(tracker_data, year)
print("tracker_col names extracted")
patient_df <- extract_patient_data(tracker_data, country_code, clinic_code)
print("patient df extracted")
colnames(patient_df) <- tracker_cols
print("tracker_col names added to patient df")
patient_df = harmonize_patient_data_columns(patient_df, columns_synonyms)
print("finished harmonizing patient df")
patient_df <- bmi_fix(patient_df)
patient_df <- date_fix(patient_df)
if (sum(colnames(patient_df) %in% "blood_pressure_mmhg") == 1)  {
patient_df <- bp_fix(patient_df)}
print("patient cleaning done")
patient_df <- patient_df %>% left_join(an_patient_data, by = "id")
print("added patient anon data")
patient_df <- patient_df %>%
mutate(sheet_name = CurrSheet,
tracker_mo = match(substr(CurrSheet, 1, 3),month.abb),
tracker_year = year,
country_code = country_code,
clinic_code = clinic_code)
print("added tracker metadata")
} # 2019 tracker
####------------ 2020 PATIENT DATA ----------------------------###
#### 2020 ####
if (year == 2020) {
patient_df <- extract_patient_data(tracker_data, country_code, clinic_code)
print("patient df extracted")
tracker_cols <- extract_tracker_cols(tracker_data, year)
print("tracker_col names extracted")
colnames(patient_df) <- tracker_cols
print("tracker_col names added to patient df")
patient_df = harmonize_patient_data_columns(patient_df, columns_synonyms)
print("finished harmonizing patient df")
patient_df <- bmi_fix(patient_df)
patient_df <- date_fix(patient_df)
if (sum(colnames(patient_df) %in% "blood_pressure_mmhg") == 1)  {
patient_df <- bp_fix(patient_df)}
print("patient cleaning done")
patient_df <- patient_df %>% left_join(an_patient_data, by = "id")
print("added patient anon data")
patient_df <- patient_df %>%
mutate(sheet_name = CurrSheet,
tracker_mo = match(substr(CurrSheet, 1, 3),month.abb),
tracker_year = year,
country_code = country_code,
clinic_code = clinic_code)
print("added tracker metadata")
} # 2020 tracker
####------------ 2020 PATIENT DATA ----------------------------###
#### 2021 ####
if (year == 2021) {
patient_df <- extract_patient_data(tracker_data, country_code, clinic_code)
print("patient df extracted")
tracker_cols <- extract_tracker_cols(tracker_data, year)
print("tracker_col names extracted")
colnames(patient_df) <- tracker_cols
print("tracker_col names added to patient df")
patient_df = harmonize_patient_data_columns(patient_df, columns_synonyms)
print("finished harmonizing patient df")
patient_df <- bmi_fix(patient_df)
patient_df <- date_fix(patient_df)
if (sum(colnames(patient_df) %in% "blood_pressure_mmhg") == 1)  {
patient_df <- bp_fix(patient_df)}
print("patient cleaning done")
patient_df <- patient_df %>% left_join(an_patient_data, by = "id")
print("added patient anon data")
patient_df <- patient_df %>%
mutate(sheet_name = CurrSheet,
tracker_mo = match(substr(CurrSheet, 1, 3),month.abb),
tracker_year = year,
country_code = country_code,
clinic_code = clinic_code)
print("added tracker metadata")
} # 2021 tracker
#### Save data ####
# save data in a list
tidy_tracker_list[[sheet_num]] <- patient_df %>%
mutate(across(everything(), as.character)) # all data is converted as characters otherwise many errors emerge
sheet_num <- sheet_num + 1
} # sheet for loop
# standard df, consistent for all tracker years
standard_df <- tibble(
patient_name = character(),
province = character(),
gender = character(),
dob = character(),
age = character(),
age_diagnosis = character(),
recruitment_date = character(),
baseline_hba1c_prc = character(),
updated_hba1c_prc = character(),
updated_hba1c_date = character(),
baseline_fbg_mgdl = character(),
updated_fbg_mgdl = character(),
updated_fbg_date = character(),
support_from_a4d = character(),
testing_fqr = character(),
est_strips_pmoth = character(),
status = character(),
updated_fbg_sample = character(),
tracker_year = character(),
clinic_code = character(),
country_code = character(),
sheet_name = character(),
insulin_regimen = character(),
blood_pressure_sys_mmhg = character(),
blood_pressure_dias_mmhg = character(),
weight = character(),
height = character(),
bmi = character(),
bmi_date = character(),
edu_occ = character(),
hospitalisation = character(),
last_clinic_visit_date = character(),
additional_support = character(),
id = character(),
latest_complication_screening_type = character(),
latest_complication_screening_date = character(),
remarks = character(),
dm_complication_comment = character(),
dm_complication_other = character(),
dm_complication_kidney = character(),
dm_complication_eye = character(),
num_admin_hosp_total = character(),
num_admin_hosp_dka = character(),
num_admin_hosp_hypo	=  character(),
num_admin_hosp_other_reason	=  character(),
num_admin_hosp_other = character(),
inactive_reason = character(),
lost_date = character(),
lost_age = character(),
diag_date	= character(),
dka_diag = character()
)
tidydata <- bind_rows(tidy_tracker_list) %>%
bind_rows(standard_df)
# filename <- paste0("tracker_", unique(tidydata$country_code), "_", unique(tidydata$clinic_code), "_", unique(tidydata$tracker_year))
#
# tracker_info <- list(tidydata,filename)
tracker_info <- list(tidydata)
return(tracker_info)
}
# TESTING IT OUT ----------------------------------------------------------
counter <- 1
saving_clean_files <- list()
for (CurrTracker in tracker_list) {
saving_clean_files[counter] <- reading_a4d_tracker(tracker_data_file = CurrTracker,
columns_synonyms = columns_synonyms)
counter <- counter + 1
}
clean_files <- bind_rows(saving_clean_files)
# write_csv(clean_files, file = "/Volumes/A4D_project/clean_a4d_data.csv")
# Setup
source("3_Code/02_a4d_patient_tracker_format.R")
source("3_Code/01_a4d_patient_tracker_extract.R")
source("3_Code/01_a4d_patient_tracker_extract.R")
# Tracker path
# example_tracker_path <- "d:/a4d_data/01_2017 AN Clinic IX A4D Tracker (1).xlsx"
example_tracker_path <- "2_Data/2018_Tracker.xlsx"
codebook_path <- "4ADMonthlyTrackerCodebook.xlsx"
# Setup
source("3_Code/02_a4d_patient_tracker_format.R")
source("3_Code/01_a4d_patient_tracker_extract.R")
## Extract codebooks for each data form
codebook_patient <- read_column_synonyms(
codebook_path, sheet = "synonyms_PatientData"
)
read_column_synonyms
# Setup
source("3_Code/00_a4d_patient_tracker_extract_helper.R")
source("3_Code/01_a4d_patient_tracker_extract.R")
source("3_Code/02_a4d_patient_tracker_format.R")
## Extract codebooks for each data form
codebook_patient <- read_column_synonyms(
codebook_path, sheet = "synonyms_PatientData"
)
# Setup
source("3_Code/00_a4d_patient_tracker_extract_helper.R")
source("3_Code/01_a4d_patient_tracker_extract.R")
source("3_Code/02_a4d_patient_tracker_format.R")
## Extract codebooks for each data form
codebook_patient <- read_column_synonyms(
codebook_path, sheet = "synonyms_PatientData"
)
codebook_product <- read_column_synonyms(
codebook_path, sheet = "synonyms_ProductData"
)
### Data extraction
df_raw <- reading_a4d_tracker(
tracker_data_file = example_tracker_path,
codebook = codebook_patient)
### Data extraction
df_raw <- reading_a4d_tracker(
tracker_data_file = example_tracker_path,
columns_synonyms = codebook_patient)
# Tracker path
# example_tracker_path <- "d:/a4d_data/01_2017 AN Clinic IX A4D Tracker (1).xlsx"
example_tracker_path <- "2_Data/2017_Tracker.xlsx"
codebook_path <- "4ADMonthlyTrackerCodebook.xlsx"
# Setup
source("3_Code/00_a4d_patient_tracker_extract_helper.R")
source("3_Code/01_a4d_patient_tracker_extract.R")
source("3_Code/02_a4d_patient_tracker_format.R")
## Extract codebooks for each data form
codebook_patient <- read_column_synonyms(
codebook_path, sheet = "synonyms_PatientData"
)
codebook_product <- read_column_synonyms(
codebook_path, sheet = "synonyms_ProductData"
)
### Data extraction
df_raw <- reading_a4d_tracker(
tracker_data_file = example_tracker_path,
columns_synonyms = codebook_patient)
codebook_patient
codebook_product
tracker_data_file
# Tracker path
# example_tracker_path <- "d:/a4d_data/01_2017 AN Clinic IX A4D Tracker (1).xlsx"
example_tracker_path <- "2_Data/2017_Tracker.xlsx"
codebook_path <- "4ADMonthlyTrackerCodebook.xlsx"
# Setup
source("3_Code/00_a4d_patient_tracker_extract_helper.R")
source("3_Code/01_a4d_patient_tracker_extract.R")
source("3_Code/02_a4d_patient_tracker_format.R")
## Extract codebooks for each data form
codebook_patient <- read_column_synonyms(
codebook_path, sheet = "synonyms_PatientData"
)
codebook_product <- read_column_synonyms(
codebook_path, sheet = "synonyms_ProductData"
)
### Data extraction
df_raw <- reading_a4d_tracker(
tracker_data_file = example_tracker_path,
columns_synonyms = codebook_patient)
tracker_data_file = example_tracker_path
columns_synonyms = codebook_patient
# list the sheets in excel workbook & filter these
sheet_list <- excel_sheets(tracker_data_file)
# MONTHLY SHEETS: only select sheets with monthly data
month_list <-sheet_list[na.omit(pmatch(month.abb, sheet_list))]
# AN PATIENT DATA SHEET: select sheet in workbook with PATIENT AN DATA
patient_sheet <-sheet_list[na.omit(grepl("AN Data", sheet_list))]
# AN PATIENT DATA DATA (merge/join at the end of the if year):
an_patient_data <- data.frame(read_xlsx(tracker_data_file, patient_sheet))
sheet_list
# AN PATIENT DATA SHEET: select sheet in workbook with PATIENT AN DATA
patient_sheet <-sheet_list[na.omit(grepl("AN Data", sheet_list))]
grepl("AN Data", sheet_list)
any(grepl("AN Data", sheet_list))
# Setup
source("3_Code/00_a4d_patient_tracker_extract_helper.R")
source("3_Code/01_a4d_patient_tracker_extract.R")
source("3_Code/02_a4d_patient_tracker_format.R")
## Extract codebooks for each data form
codebook_patient <- read_column_synonyms(
codebook_path, sheet = "synonyms_PatientData"
)
codebook_product <- read_column_synonyms(
codebook_path, sheet = "synonyms_ProductData"
)
### Data extraction
df_raw <- reading_a4d_tracker(
tracker_data_file = example_tracker_path,
columns_synonyms = codebook_patient)
View(df_raw)
# Setup
source("3_Code/00_a4d_patient_tracker_extract_helper.R")
source("3_Code/01_a4d_patient_tracker_extract.R")
source("3_Code/02_a4d_patient_tracker_format.R")
## Extract codebooks for each data form
codebook_patient <- read_column_synonyms(
codebook_path, sheet = "synonyms_PatientData"
)
codebook_product <- read_column_synonyms(
codebook_path, sheet = "synonyms_ProductData"
)
### Data extraction
df_raw <- reading_a4d_tracker(
tracker_data_file = example_tracker_path,
columns_synonyms = codebook_patient)
# list the sheets in excel workbook & filter these
sheet_list <- excel_sheets(tracker_data_file)
# MONTHLY SHEETS: only select sheets with monthly data
month_list <-sheet_list[na.omit(pmatch(month.abb, sheet_list))]
# AN PATIENT DATA SHEET: select sheet in workbook with PATIENT AN DATA
if(any(grepl("AN Data", sheet_list))){
patient_sheet <-sheet_list[na.omit(grepl("AN Data", sheet_list))]
# AN PATIENT DATA DATA (merge/join at the end of the if year):
an_patient_data <- data.frame(read_xlsx(tracker_data_file, patient_sheet))
all_patient_ids <- an_patient_data$Patient.ID
an_patient_data <- clean_anon_data(an_patient_data)
print("cleaned patient anon data")
} else {
warning("File has no AN DATA SHEET - Either fake data file or error")
an_patient_data <- NA
}
print("patient AN Data extracted")
# Extract year
year <- 2000 + unique(parse_number(month_list))
print(year)
tidy_tracker_list <- NULL
sheet_num <- 1
year
month_list
CurrSheet <- month_list[1]
CurrSheet
tracker_data <- as.data.frame(read.xlsx(xlsxFile = tracker_data_file, fillMergedCells = TRUE, sheet = CurrSheet))
print("tracker read in")
cc_codes <- extract_country_clinic_code(tracker_data, year)
country_code <- cc_codes$country_code
clinic_code <- cc_codes$clinic_code
print("country and clinic code extracted")
cc_codes
country_code
tracker_data
