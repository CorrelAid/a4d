)
if(is.na(returned_unit)){
warning("FBG unit used by hospital could not be matched ~ Assumed to be mmol/L")
}
return(returned_unit)
}
# @Description: Makes sure FBG values are in mmol/L
# @fbg: Any fbg value in mg/dL or mmol/L
# @country_id: ID of the country where patient values were taken
# @hospital_id: ID of the hospital where patient values were taken
# @Output: FBG value in mmol/L or NA if not matched
transform_fbg_in_mmol <- function(fbg, country_id, hospital_id) {
fbg_num <- as.numeric(fbg)
factor_mmol_in_mg <- 18.02
measure_unit <- assign_fbg_unit_per_hospital(country_id = country_id,
hospital_id = hospital_id)
# If not unit "mmol/L" is assumed
fbg_mmol <- case_when(
measure_unit == "mg/dL" ~ fbg_num / factor_mmol_in_mg,
measure_unit == "mmol/L" ~ fbg_num,
is.na(measure_unit) ~ fbg_num,
TRUE ~ NA_real_
)
return(as.numeric(fbg_mmol))
}
fbg_mmol_lower_bound <- 0
fbg_mmol_upper_bound <- 136.5 # https://www.cleveland19.com/story/1425584/ohio-man-holds-world-record-of-highest-blood-sugar/
# @Description: Check if FBG value is realistic
# @fbg_mmol: FBG value in mmol/L
# @fbg_min, fbg_max: Lower and upper bound of realistic fbg values
# @Output: FBG mmol value if no error. Otherwise raised error & NA
sanity_check_fbg_mmol <- function(fbg_mmol, min_fbg = fbg_mmol_lower_bound,
max_fbg = fbg_mmol_upper_bound) {
fbg_result <- case_when(
fbg_mmol >= min_fbg & fbg_mmol <= max_fbg ~ fbg_mmol,
TRUE ~ NA
)
if(is.na(fbg_result)){
stop("ERROR: FBG value outside realistic scale")
}
return(fbg_result)
}
# @Description: FBG input is often a range (200-300) but functions only
#               work with unique values. This wrapper hence loops the range through
#               the functions.
# @hid: Hospital ID
# @cid: country ID
fbg_wrapper <- function(fbg_range, hid, cid){
# Source for levels: https://www.cdc.gov/diabetes/basics/getting-tested.html
fbg_range <- case_when(
grepl("high|bad", tolower(fbg_range)) ~ "200",
grepl("med|medium", tolower(fbg_range)) ~ "140-199",
grepl("low|good|okay", tolower(fbg_range)) ~ "140",
TRUE ~ fbg_range
)
lower_upper_fbg <- fbg_range %>% str_split("-") %>%
unlist() %>%
as.numeric()
for(i in 1:length(lower_upper_fbg)){
lower_upper_fbg[i] <- sanity_check_fbg_mmol(
transform_fbg_in_mmol(
lower_upper_fbg[i],
country_id = cid,
hospital_id = hid
)
)
}
final <- paste(lower_upper_fbg, collapse = "-")
}
fbg_wrapper(
fbg, cid = country, hid = hospital)
country
hospital
fbg
# Source for levels: https://www.cdc.gov/diabetes/basics/getting-tested.html
fbg_range <- case_when(
grepl("high|bad", tolower(fbg_range)) ~ "200",
grepl("med|medium", tolower(fbg_range)) ~ "140-199",
grepl("low|good|okay", tolower(fbg_range)) ~ "140",
TRUE ~ fbg_range
)
lower_upper_fbg <- fbg_range %>% str_split("-") %>%
unlist() %>%
as.numeric()
for(i in 1:length(lower_upper_fbg)){
lower_upper_fbg[i] <- sanity_check_fbg_mmol(
transform_fbg_in_mmol(
lower_upper_fbg[i],
country_id = cid,
hospital_id = hid
)
)
}
lower_upper_fbg <- fbg_range %>% str_split("-") %>%
unlist() %>%
as.numeric()
i
length(lower_upper_fbg)
transform_fbg_in_mmol(
lower_upper_fbg[i],
country_id = cid,
hospital_id = hid
)
fbg_mmol <- 300
fbg_result <- case_when(
fbg_mmol >= min_fbg & fbg_mmol <= max_fbg ~ fbg_mmol,
TRUE ~ NA
)
min_fbg = fbg_mmol_lower_bound
max_fbg = fbg_mmol_upper_bound
fbg_result <- case_when(
fbg_mmol >= min_fbg & fbg_mmol <= max_fbg ~ fbg_mmol,
TRUE ~ NA
)
fbg_result <- case_when(
fbg_mmol >= min_fbg & fbg_mmol <= max_fbg ~ fbg_mmol,
TRUE ~ NA_real_
)
for(i in 1:length(lower_upper_fbg)){
lower_upper_fbg[i] <- sanity_check_fbg_mmol(
transform_fbg_in_mmol(
lower_upper_fbg[i],
country_id = cid,
hospital_id = hid
)
)
}
# @Description: Check if FBG value is realistic
# @fbg_mmol: FBG value in mmol/L
# @fbg_min, fbg_max: Lower and upper bound of realistic fbg values
# @Output: FBG mmol value if no error. Otherwise raised error & NA
sanity_check_fbg_mmol <- function(fbg_mmol, min_fbg = fbg_mmol_lower_bound,
max_fbg = fbg_mmol_upper_bound) {
fbg_result <- case_when(
fbg_mmol >= min_fbg & fbg_mmol <= max_fbg ~ fbg_mmol,
TRUE ~ NA_real_
)
if(is.na(fbg_result)){
stop("ERROR: FBG value outside realistic scale")
}
return(fbg_result)
}
for(i in 1:length(lower_upper_fbg)){
lower_upper_fbg[i] <- sanity_check_fbg_mmol(
transform_fbg_in_mmol(
lower_upper_fbg[i],
country_id = cid,
hospital_id = hid
)
)
}
fbg_result
min_fbg
# @Description: Check if FBG value is realistic
# @fbg_mmol: FBG value in mmol/L
# @fbg_min, fbg_max: Lower and upper bound of realistic fbg values
# @Output: FBG mmol value if no error. Otherwise raised error & NA
sanity_check_fbg_mmol <- function(fbg_mmol, min_fbg = fbg_mmol_lower_bound,
max_fbg = fbg_mmol_upper_bound) {
fbg_result <- case_when(
fbg_mmol <= min_fbg & fbg_mmol >= max_fbg ~ fbg_mmol,
TRUE ~ NA_real_
)
if(is.na(fbg_result)){
stop("ERROR: FBG value outside realistic scale")
}
return(fbg_result)
}
lower_upper_fbg <- fbg_range %>% str_split("-") %>%
unlist() %>%
as.numeric()
for(i in 1:length(lower_upper_fbg)){
lower_upper_fbg[i] <- sanity_check_fbg_mmol(
transform_fbg_in_mmol(
lower_upper_fbg[i],
country_id = cid,
hospital_id = hid
)
)
}
fbg_mmol
fbg_result <- case_when(
fbg_mmol <= min_fbg & fbg_mmol >= max_fbg ~ fbg_mmol,
TRUE ~ NA_real_
)
fbg_result
hosp_str <- df_raw$hospitalisation
hosp_str
str_out <- hosp_str %>%
replace("NA", NA)
str_out
str_out <- hosp_str %>%
replace(hosp_str == "NA", NA)
str_out
data_c$hospitalisation[i] <- fix_hospitalisation(data$hospitalisation[i])
## Example script to process a tracker file
## TODO: Enhance with upload to database
## Set wd equal path of repository
setwd("D:/Work/Correlaid/A4D/a4d_analytics")
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_raw)
View(df_cleaned)
test <- df_raw$edu_occ[1]
test
str_split(" ", # อนุบา)
}
fix_edu_occ <- function(x) {
x <- try(extract_hospitalisation_date(x),
silent = TRUE)
if (class(x) == "try-error") {
x <- "999999" }
return(x)
}
# [32] "hospitalisation" ####
# ______________________________________________
# TODO: If possible transform all texted dates into real dates. Complex manual function necessary
extract_hospitalisation_date <- function(hosp_str){
str_out <- hosp_str %>%
replace(hosp_str == "NA", NA)
}
fix_hospitalisation <- function(x) {
x <- try(extract_hospitalisation_date(x),
silent = TRUE)
if (class(x) == "try-error") {
x <- "999999" }
return(x)
}
# [34] "additional_support" ####
# ______________________________________________
# ?
# [35] "id" ####
# ______________________________________________
# what id?
# [36] "latest_complication_screening_type" ####
# ______________________________________________
# take as chr?
# [38] "remarks" ####
# ______________________________________________
# take as chr?
# TODO: Add checks & new columns for DC_V2_Anon Example csv
# MAIN/WRAPPER FUNCTION ---------------------------------------------------
# Process: Check data rowwise
# Output 1: Cleaned data table
# Output 2: Table containing data checklist
cleaning_a4d_tracker <- function(data) {
# TODO: Transform for loop by dplyr::mutate
data_c <- data
# create a clean data frame
data_c[,] <- NA
for (i in 1:nrow(data)) {
# TODO: Check if [i,]$column can be replcaed by $column[i]
# Dates
data_c$dob[i] <- fix_date_cols(data$dob[i])
data_c$updated_fbg_date[i] = fix_date_cols(data$updated_fbg_date[i])
data_c$updated_hba1c_date[i] = fix_date_cols(data$updated_hba1c_date[i])
# TODO: Rework function to capture bmi date being "2020-12" not "2020-12-02"
data_c$bmi_date[i] = fix_date_cols(data$bmi_date[i])
data_c$recruitment_date[i] = fix_date_cols(data$recruitment_date[i])
data_c$last_clinic_visit_date[i] = fix_date_cols(data$last_clinic_visit_date[i])
data_c$latest_complication_screening_date[i] = fix_date_cols(
data$latest_complication_screening_date[i])
# Static patient information
data_c$id[i] <- fix_chr_without_NAs(data$id[i])
data_c$patient_name[i] <- fix_chr_without_NAs(data$patient_name[i])
data_c$province[i] <- fix_chr_without_NAs(data$province[i])
data_c$tracker_year[i] <- fix_chr_without_NAs(data$tracker_year[i])
data_c$clinic_code[i] <- fix_chr_without_NAs(data$clinic_code[i])
data_c$country_code[i] <- fix_chr_without_NAs(data$country_code[i])
data_c$sheet_name[i] <- fix_chr_without_NAs(data$sheet_name[i])
data_c$gender[i] <- fix_gender(data$gender[i])
data_c$age[i]    <- fix_age(data$age[i])
data_c$age_diagnosis[i] <- fix_age_diagnosis(data$age_diagnosis[i])
data_c$status[i] <- status_fix(data$status[i])
# Dynamic body information
data_c$height[i] <- fix_height(data$height[i])
data_c$weight[i] <- fix_weight(data$weight[i])
data_c$bmi[i]    <- fix_bmi(data$bmi[i], data_c$weight[i], data_c$height[i] )
# Blood values
data_c$updated_hba1c_prc[i]  <- fix_hba1c(data$updated_hba1c_prc[i])
data_c$baseline_hba1c_prc[i] <- fix_hba1c(data$baseline_hba1c_prc[i])
data_c$insulin_regimen[i]    <- fix_insulin_reg(data$insulin_regimen[i])
# FBG
data_c$updated_fbg_mmoll <- fbg_fix(data_c$updated_fbg_mldl,
country  = data_c$country_code,
hospital = data_c$clinic_code)
data_c$baseline_fbg_mmoll <- fbg_fix(data_c$baseline_fbg_mldl,
country  = data_c$country_code,
hospital = data_c$clinic_code)
data_c$updated_fbg_sample[i] <- fix_fbg_sample(data$updated_fbg_sample[i])
data_c$blood_pressure_dias_mmhg[i] <- fix_blood_pressure_dias(
data$blood_pressure_dias_mmhg[i])
data_c$blood_pressure_sys_mmhg[i] <- fix_blood_pressure_sys(
data$blood_pressure_sys_mmhg[i])
# Other
data_c$support_from_a4d[i] <- supporta4d_fix(data$support_from_a4d[i])
data_c$testing_fqr[i] <- testfqr_fix(data$testing_fqr[i])
data_c$hospitalisation[i] <- fix_hospitalisation(data$hospitalisation[i])
}
# Keep FBG in mmol/L unit
data_c <- data_c %>%
dplyr::select(
-c("updated_fbg_mldl", "baseline_fbg_mldl")
)
return(data_c)
}
# TEST --------------------------------------------------------------------
# Run test only if script is not sourced
if (!interactive()) {
# reading the data frame
spec_cols <- cols(
no = col_character(),
patient_name = col_character(),
province = col_character(),
gender = col_character(),
dob = col_character(),
age = col_character(),
age_diagnosis = col_character(),
recruitment_date = col_character(),
baseline_hba1c_prc = col_character(),
updated_hba1c_prc = col_character(),
updated_hba1c_date = col_character(),
baseline_fbg_mldl = col_character(),
updated_fbg_mldl = col_character(),
updated_fbg_date = col_character(),
support_from_a4d = col_character(),
testing_fqr = col_character(),
est_strips_pmoth = col_character(),
status = col_character(),
updated_fbg_sample = col_character(),
tracker_year = col_character(),
clinic_code = col_character(),
country_code = col_character(),
sheet_name = col_character(),
insulin_regimen = col_character(),
blood_pressure_sys_mmhg = col_character(),
blood_pressure_dias_mmhg = col_character(),
weight = col_character(),
height = col_character(),
bmi = col_character(),
bmi_date = col_character(),
edu_occ = col_character(),
hospitalisation = col_character(),
last_clinic_visit_date = col_character(),
additional_support = col_character(),
id = col_character(),
latest_complication_screening_type = col_character(),
latest_complication_screening_date = col_character(),
remarks = col_character()
)
data <- read_csv("~/Desktop/A4DTracker_Overview.csv", col_types = spec_cols)
testing <- cleaning_a4d_tracker(data = data)
}
str_split(" ", test)
test
thai_edu <- list(
elementary = "ประถมศึกษาปีที่",
kindergarden = "อนุบา",
)
thai_edu <- list(
elementary = "ประถมศึกษาปีที่",
kindergarden = "อนุบา"
)
grepl(thai_edu$elementary, test)
## Example script to process a tracker file
## TODO: Enhance with upload to database
## Set wd equal path of repository
setwd("D:/Work/Correlaid/A4D/a4d_analytics")
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_raw)
View(df_cleaned)
x <- df_raw$edu_occ
match_education_strings(x)
x
# @Description: Match thai education words and return level of education
match_education_strings <- function(str){
str_out <- case_when(
grepl(paste0(thai_edu$elementary,"|elementary"), str) ~ "elementary",
grepl(paste0(thai_edu$kindergarden,"|kindergarden"), str) ~ "kindergarden",
grepl(paste0(thai_edu$university,"|university"), str) ~ "university",
TRUE ~ str
)
return(str_out)
}
match_education_strings(x)
str <- x[1]
str
grepl(paste0(thai_edu$elementary,"|elementary"), str) ~ "elementary"
grepl(paste0(thai_edu$elementary,"|elementary"), str)
grepl(thai_edu$elementary, str)
str
thai_edu$elementary
grepl("ประถมศึกษาปี, str)
grepl("ประถมศึกษาปี", str)
grepl(paste0("ประถมศึกษาปี", "|elementary"), str) ~ "elementa
""
""
grepl(paste0("ประถมศึกษาปี", "|elementary"), str) ~ "element"
grepl(paste0("ประถมศึกษาปี", "|elementary"), str)
## Example script to process a tracker file
## TODO: Enhance with upload to database
## Set wd equal path of repository
setwd("D:/Work/Correlaid/A4D/a4d_analytics")
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_raw)
View(df_cleaned)
## Example script to process a tracker file
## TODO: Enhance with upload to database
## Set wd equal path of repository
setwd("D:/Work/Correlaid/A4D/a4d_analytics")
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_raw)
View(df_cleaned)
source('D:/Work/Correlaid/A4D/a4d_analytics/3_Code/02_a4d_tracker_format.R', encoding = 'UTF-8')
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
View(df_raw)
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_cleaned)
tracker_data_file = example_tracker_path
year = 2021
clinic = "ABC"
country = "DEF"
library(tidyverse)
library(readxl)
library(zoo)
library(readr)
library(lubridate)
# list the sheets in excel workbook & filter these (only select sheets with monthly data)
sheet_list <- excel_sheets(tracker_data_file)
sheet_list <-sheet_list[na.omit(pmatch(month.abb, sheet_list))]
mmol_hospitals
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
## Example script to process a tracker file
## TODO: Enhance with upload to database
## Set wd equal path of repository
# setwd("D:/Work/Correlaid/A4D/a4d_analytics")
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_raw)
View(df_cleaned)
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
rm(example_tracker_path)
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
