# [12, 13] "fbg_mldl" ####
# ______________________________________________
#### FBG
# TODO: integrate logic to replace unrealistic values with NAs
# TODO: Check whether values are realistic, what units are used (input by Tyla)
# TODO Operationalization: Show where NA values exist
# TODO: Include in final function
fbg_fix <- function(d) {
d <- try(as.numeric(d), silent = TRUE)
if (class(d) == "try-error") {
d  <- 999999 }
return(d)
}
# [15] "support_from_a4d" ####
# ______________________________________________
#### SUPPORT A4D
supporta4d_fix <- function(d) {
d <- try(as.character(d), silent = TRUE)
if (!d %in% c("Partial", "SAC", "Full")) {
d  <- "999999" }
return(d)
}
# [16] "testing_fqr" ####
# ______________________________________________
#### TESTING FQR
# If ranges, take mean
replace_testfqr_strings_mean <- function(x){
y <- unlist(map(str_split(x, pattern = "-"),
function(z) mean(as.numeric(z))))
}
testfqr_fix <- function(d) {
d <- try(replace_testfqr_strings_mean(d), silent = TRUE)
if (class(d) == "try-error") {
d  <- 999999 }
return(d)
}
# [17] "est_strips_pmoth" ####
# ______________________________________________
#### STRIPS NEEDED
strips_fix <- function(d) {
d <- try(as.numeric(d), silent = TRUE)
if (class(d) == "try-error") {
d  <- 999999 }
return(d)
}
# [18] "status" ####
# ______________________________________________
#### STATUS
status_fix <- function(d) {
d <- try(as.character(d), silent = TRUE)
if (!d %in% c("Active", "Deseaced", "Discontinued")) {
d  <- "999999" }
return(d)
}
# [19] "updated_fbg_sample" ####
# ______________________________________________
#### UPDATED FBG SAMPLE
fix_fbg_sample <- function(d) {
d <- try(replace_empty_string_with_NA(as.character(d)), silent = TRUE)
if (!d %in% c("SMBG", "CBG")) {
d  <- "999999" }
return(d)
}
# [20] "tracker_year" ####
# TODO: Read out single year, check that all years are the same and match the input of the year function?
# [21] "clinic_code" ####
# TODO: When we have data, using list of clinics to double check?
# TODO Operationalization: Read out clinic table in database to check data with
# [22] "country_code" ####
# TODO: When we have data, using list of countries to double check?
# TODO Operationalization: Read out clinic table in database to check data with
# [23] "sheet_name" ####
# TODO: Include in final function
parse_sheet_name <- function(x){
y <- unlist(map(as.character(x), function(z)
(format(readr::parse_date(z,"%b'%y"), format = "%Y-%m"))))
}
transform_sheet_name_to_tracker_month <- function(x) {
x <- try(parse_sheet_name(x), silent = TRUE)
if (class(x) == "try-error") {
x <- "999999" }
return(x)
}
# [24] "insulin_regimen" ####
# ______________________________________________
#### INSULIN REGIMEN
fix_insulin_reg <- function(d) {
d <- try(as.character(d), silent = TRUE)
if (!tolower(d) %in% c("basal-bolus", "premixed 30/70 bd", "	insulin pump")) {
d  <- "999999" }
return(d)
}
# [25] "blood_pressure_sys_mmhg" ####
par_highest_blood_pressure_sys <- 250
par_lowest_blood_pressure_sys <- 20
fix_blood_pressure_sys <- function(x) {
x <- try(check_numeric_borders(
x,
par_highest_blood_pressure_sys,
par_lowest_blood_pressure_sys), silent = TRUE)
if (class(x) == "try-error") {
x <- "999999" }
return(x)
}
# [26] "blood_pressure_dias_mmhg" ####
par_highest_blood_pressure_dias <- 220
par_lowest_blood_pressure_dias <- 20
fix_blood_pressure_dias <- function(x) {
x <- try(check_numeric_borders(
x,
par_highest_blood_pressure_dias,
par_lowest_blood_pressure_dias), silent = TRUE)
if (class(x) == "try-error") {
x <- "999999" }
return(x)
}
# [27] "weight" ####
par_max_weight_kg <- 200
par_min_weight_kg <- 0
fix_weight <- function(x) {
x <- try(check_numeric_borders(x, par_max_weight_kg, par_min_weight_kg),
silent = TRUE)
if (class(x) == "try-error") {
x <- "999999" }
return(x)
}
# [28] "height" ####
par_max_height <- 200
par_min_height <- 0
transform_cm_to_m <- function(height){
height <- as.numeric(height)
height <- ifelse(height > 50,
height/100,
height)
}
fix_height <- function(x) {
x <- try(
check_numeric_borders(
transform_cm_to_m(x),
par_max_height, par_min_height),
silent = TRUE)
if (class(x) == "try-error") {
x <- "999999" }
return(x)
}
# [29] "bmi" ####
# TODO: Check realistic values and filter based on that
par_max_bmi <- 200
par_min_bmi <- 0
replace_NA_bmi <- function(bmi_vector,
height_vector,
weight_vector){
calc_bmi <- as.numeric(weight_vector) / (height_vector^2)
output <- replace_na(bmi_vector, calc_bmi)
}
fix_bmi <- function(x, fixed_weight_kg, fixed_height_m) {
x <- try(check_numeric_borders(x, par_max_bmi, par_min_bmi),
silent = TRUE)
if (class(x) == "try-error") {
x <- "999999" }
return(x)
}
# [31] "edu_occ" ####
# TODO: match Thai words with englisch:
# ประถมศึกษาปีที่= elementary
# อนุบาล=kindergarden
# Take years behind in consideration, e.g."ประถมศึกษาปีที่ 4"
# [32] "hospitalisation" ####
# TODO: Check column in detail, very complex date column with outwritten text, set "NA" to NA
# [34] "additional_support" ####
# ?
# [35] "id" ####
# what id?
# [36] "latest_complication_screening_type" ####
# take as chr?
# [38] "remarks" ####
# take as chr?
#### BLOOD PRESSURE SYS
# TODO: need to add a condition about reasonable values
#### BLOOD PRESSURE DYAS
# TODO: Add checks for DC_V2_Anon Example csv
# MAIN/WRAPPER FUNCTION ---------------------------------------------------
# Process: Check data rowwise
# Output 1: Cleaned data table
# Output 2: Table containing data checklist
cleaning_a4d_tracker <- function(data) {
# TODO: Transform for loop by dplyr::mutate
data_c <- data
# create a clean data frame
data_c[,] <- NA
for (i in 1:nrow(data)) {
# TODO: Check if [i,]$column can be replcaed by $column[i]
# Dates
data_c$dob[i] <- fix_date_cols(data[i,]$dob)
data_c$updated_fbg_date[i] = fix_date_cols(data[i,]$updated_fbg_date)
data_c$updated_hba1c_date[i] = fix_date_cols(data[i,]$updated_hba1c_date)
data_c$bmi_date[i] = fix_date_cols(data[i,]$bmi_date)
data_c$recruitment_date[i] = fix_date_cols(data[i,]$recruitment_date)
data_c$last_clinic_visit_date[i] = fix_date_cols(data[i,]$last_clinic_visit_date)
data_c$latest_complication_screening_date[i] = fix_date_cols(data[i,]$latest_complication_screening_date)
# data[i,]$age_diagnosis = agediag_fix(data[i,]$age_diagnosis)
data_c$updated_hba1c_prc[i] = fix_hba1c(data[i,]$updated_hba1c_prc)
data_c$baseline_hba1c_prc[i] = fix_hba1c(data[i,]$baseline_hba1c_prc)
data_c$updated_fbg_sample[i] = fix_fbg_sample(data[i,]$updated_fbg_sample)
data_c$insulin_regimen[i] = fix_insulin_reg(data[i,]$insulin_regimen)
data_c$height[i] <- fix_height(data$height[i])
data_c$weight[i] <- fix_weight(data$weight[i])
data_c$bmi[i] <- fix_bmi(data$bmi[i], data_c$weight[i], data_c$height[i] )
}
return(data_c)
}
# TEST --------------------------------------------------------------------
# Run test only if script is not sourced
if (!interactive()) {
# reading the data frame
spec_cols <- cols(
no = col_character(),
patient_name = col_character(),
province = col_character(),
gender = col_character(),
dob = col_character(),
age = col_character(),
age_diagnosis = col_character(),
recruitment_date = col_character(),
baseline_hba1c_prc = col_character(),
updated_hba1c_prc = col_character(),
updated_hba1c_date = col_character(),
baseline_fbg_mldl = col_character(),
updated_fbg_mldl = col_character(),
updated_fbg_date = col_character(),
support_from_a4d = col_character(),
testing_fqr = col_character(),
est_strips_pmoth = col_character(),
status = col_character(),
updated_fbg_sample = col_character(),
tracker_year = col_character(),
clinic_code = col_character(),
country_code = col_character(),
sheet_name = col_character(),
insulin_regimen = col_character(),
blood_pressure_sys_mmhg = col_character(),
blood_pressure_dias_mmhg = col_character(),
weight = col_character(),
height = col_character(),
bmi = col_character(),
bmi_date = col_character(),
edu_occ = col_character(),
hospitalisation = col_character(),
last_clinic_visit_date = col_character(),
additional_support = col_character(),
id = col_character(),
latest_complication_screening_type = col_character(),
latest_complication_screening_date = col_character(),
remarks = col_character()
)
data <- read_csv("~/Desktop/A4DTracker_Overview.csv", col_types = spec_cols)
testing <- cleaning_a4d_tracker(data = data)
}
height <- fix_height(df_raw$height)
height
weight <- fix_weight(df_raw$weight)
weight
height_vector <- height
weight_vector <- weight
bmi_vector <- check_numeric_borders(df_raw$bmi, par_max_bmi, par_min_bmi)
bmi_vector
calc_bmi <- as.numeric(weight_vector) / (height_vector^2)
calc_bmi
bmi_vector
replace_na(bmi_vector, calc_bmi)
output <- ifelse(is.na(bmi_vector), calc_bmi, bmi_vector)
output
# [29] "bmi" ####
# TODO: Check realistic values and filter based on that
par_max_bmi <- 60
par_min_bmi <- 4
replace_NA_bmi <- function(bmi_vector,
height_vector,
weight_vector){
calc_bmi <- as.numeric(weight_vector) / (height_vector^2)
output <- ifelse(is.na(bmi_vector), calc_bmi, bmi_vector)
}
bmi_vector <- check_numeric_borders(df_raw$bmi, par_max_bmi, par_min_bmi)
output <- ifelse(is.na(bmi_vector), calc_bmi, bmi_vector)
output
## Example script to process a tracker file
## TODO: Enhance with upload to database
## Set wd equal path of repository
setwd("D:/Work/Correlaid/A4D/a4d_analytics")
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_raw)
View(df_cleaned)
## Set wd equal path of repository
setwd("D:/Work/Correlaid/A4D/a4d_analytics")
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_raw)
View(df_cleaned)
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_raw)
View(df_cleaned)
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_cleaned)
?parse_date_time
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_cleaned)
warnings()
?as.Date
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_cleaned)
data <- df_raw
i <- 290
data$dob[i]
data
data$dob
i <- 2
data$dob[i]
fix_date_cols(data$dob[i])
test <- fix_date_cols(data$dob[i])
str(test)
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_cleaned)
test
View(test)
df_cleaned$updated_fbg_date
test
as.Date(test)
as.Date(test, "%Y-%m-%d")
as.Date(test, "%Y-%m-%d")
integer(as.Date(test, "%Y-%m-%d"))
as.integer(as.Date(test, "%Y-%m-%d"))
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_cleaned)
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
View(df_cleaned)
data = df_raw
fix_date_cols(data$dob)
# Dates
data_c$dob[i] <- fix_date_cols(data$dob[i])
data_c$updated_fbg_date[i] = fix_date_cols(data$updated_fbg_date[i])
data_c <- data
# create a clean data frame
data_c[,] <- NA
fix_blood_pressure_sys(data$blood_pressure_sys_mmhg)
## Example script to process a tracker file
## TODO: Enhance with upload to database
## Set wd equal path of repository
setwd("D:/Work/Correlaid/A4D/a4d_analytics")
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
# View(df_raw)
View(df_cleaned)
## Example script to process a tracker file
## TODO: Enhance with upload to database
## Set wd equal path of repository
setwd("D:/Work/Correlaid/A4D/a4d_analytics")
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
# View(df_raw)
View(df_cleaned)
## Example script to process a tracker file
## TODO: Enhance with upload to database
## Set wd equal path of repository
setwd("D:/Work/Correlaid/A4D/a4d_analytics")
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
# View(df_raw)
View(df_cleaned)
## Example script to process a tracker file
## TODO: Enhance with upload to database
## Set wd equal path of repository
setwd("D:/Work/Correlaid/A4D/a4d_analytics")
# Tracker path
example_tracker_path <- "2_Data/2021_Tracker.xlsx"
# Setup
source("3_Code/01_a4d_tracker_extract.R")
source("3_Code/02_a4d_tracker_format.R")
### Data extraction
df_raw <- reading_a4d_tracker(tracker_data_file = example_tracker_path,
year = 2021,
clinic = "ABC",
country = "DEF")
### Data cleanse
df_cleaned <- cleaning_a4d_tracker(data = df_raw)
# View(df_raw)
View(df_cleaned)
data$est_strips_pmoth
